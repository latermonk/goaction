# .github/workflows/go.yml
name: Go CI

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发工作流

jobs:
  build:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 系统作为运行环境
    # 添加权限配置
    permissions:
      contents: write  # 允许写入仓库内容

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 检出代码到运行环境

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4  # 设置 Go 环境
        with:
          go-version: ${{ matrix.go-version }}  # 指定 Go 的版本

      - name: Build for ${{ matrix.os }}
        run: |
          env GOOS=${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }}
          env GOARCH=amd64
          go build -o goaction-${{ env.GOOS }}-${{ env.GOARCH }} -v ./...
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v0.1.0  # 使用推送的标签名
          release_name: "Release ${{ github.ref_name }}"
          body: "自动发布的 Release 版本"  # 可自定义或从文件读取
          draft: false  # 是否为草稿
          prerelease: false  # 是否为预发布
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 默认权限令牌

      - name: Upload Release Asset for ${{ matrix.os }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./goaction-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }}-amd64
          asset_name: goaction-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }}-amd64
          asset_content_type: application/octet-stream